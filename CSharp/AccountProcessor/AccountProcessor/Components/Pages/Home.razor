@using System.IO
@using System.Collections.Immutable;
@using AccountProcessor.Components.Services;
@page "/"
@rendermode InteractiveServer
@inject Services.IExcelFileRunner ExcelFileRunner;
@inject Services.ITransactionCategoriser Categoriser;
@inject IJSRuntime JS

<!-- Add icon library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<!-- Button Style -->
<style>
    .btn {
        background-color: DodgerBlue;
        border: none;
        color: white;
        padding: 2px 2x;
        font-size: 14px;
        cursor: pointer;
    }

    /* Darker background on mouse-over */
    .btn:hover {
        background-color: RoyalBlue;
    }
</style>

<PageTitle>Home</PageTitle>

<h1>Account Processor</h1>

<p/>
<hr/>

<button class="btn btn-primary">
    <strong>Reverse File: </strong>
    <InputFile OnChange="@ReverseFile" accept=".csv" />
</button>
<p role="status"><strong>Result</strong>: @ReverseFileResult</p>

<p/>

<hr/>

<p/>

<button class="btn btn-primary">
    <strong>Categorise: </strong>
    <InputFile OnChange="@Categorise" accept=".xlsx" />
</button>
<p role="status"><strong>Result</strong>: @CategorisedTransactionsResult</p>

<hr />

<p role="status"><strong>Last Action Error</strong>: @LastActionError</p>

<hr />

<label>Month:</label>
<input type="month" value="@Month?.ToString("yyyy-MM")" @onchange="e => OnSetMonth((string?)e.Value)">
<p/>

@if (Categories.HasValue && AllSections.HasValue && Transactions.HasValue)
{
    <hr />

    <label ><strong>Add New Section:</strong></label>
    <select style="margin-right: 5px" value="@NewSectionName" @onchange="e => NewSectionCategoryName = (string?)e.Value">
        <option value="0" selected>Choose Category</option>
        @foreach (var cat in Categories.Value)
        {
            <option value="@cat.Name">@cat.Name</option>
        }
    </select>

    <input style="margin-right: 5px" placeholder="Section Name..." value="@NewSectionName" @onchange="e => NewSectionName = (string?)e.Value" />

    <button class="btn" @onclick="() => CreateNewSection()"><i class="fa fa-plus"></i></button>

    foreach(var block in Transactions.Value)
    {
        <hr />

        <label><strong>@block.Display</strong></label>

        <table class="table" style="width:auto">
            <thead>
                <tr>
                    @if (!block.IsUnmatched)
                    {
                        <th>Section</th>
                    }

                    <th>Date</th>
                    <th>Description</th>
                    <th class="border-right">Amount (£)</th>

                    @if (block.IsUnmatched)
                    {
                        <th>Category</th>
                        <th>Match On</th>
                        <th>Description</th>
                        <th>Once</th>
                        <th>Match</th>
                    }
                    else
                    {
                        <th>Match</th>
                        <th>Delete</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in block.Rows)
                {
                    var tr = row.Transaction;
                    var displayAmount = tr.Amount < 0 ? $"-£{-tr.Amount:F2}" : $"£{tr.Amount:F2}";
                    var styleColor = tr.Amount < 0 ? "color:red" : "color:black";

                    <tr>

                        @if (!block.IsUnmatched)
                        {
                            <td class="fitwidth">@row.Section?.Name</td>
                        }

                        <td class="fitwidth">@tr.Date.ToShortDateString()</td>
                        <td class="fitwidth">@tr.Description</td>
                        <td class="border-right" style="@styleColor">@displayAmount</td>

                        @if (block.IsUnmatched)
                        {
                            <td>
                                <select value="@row.SelectionId" @onchange="e => row.SelectionId = (string?)e.Value">
                                    <option value="0" selected>Choose Section</option>
                                    @foreach (var cat in AllSections.Value)
                                    {
                                        <option value="@cat.Id">@cat.Display</option>
                                    }
                                </select>
                            </td>

                            <td>
                                <input placeholder="Match on" value="@row.MatchOn" @onchange="e => row.MatchOn = (string?)e.Value" />
                            </td>
                            <td>
                                <input placeholder="Override Description" value="@row.OverrideDescription" @onchange="e => row.OverrideDescription = (string?)e.Value" />
                            </td>
                            <td>
                                <input type="checkbox" @onchange="e => row.AddOnlyForTransaction = (bool)e.Value">
                            </td>
                            <td>
                                <button class="btn" @onclick="() => PerformMatch(row)"><i class="fa fa-plus"></i></button>
                            </td>
                        }
                        else
                        {
                            <td class="fitwidth">@row.LatestMatch?.Pattern</td>
                            <td>
                                <button class="btn" @onclick="() => DeleteMatch(row)"><i class="fa fa-trash"></i></button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code
{
    /// <summary> Display message after "Reverse File" called </summary>
    private string? ReverseFileResult;
    private string? CategorisedTransactionsResult;
    private string? LastActionError;

    private DateOnly? Month;

    private ImmutableArray<CategoryHeader>? Categories;
    private ImmutableArray<SectionSelectorRow>? AllSections;

    private string? NewSectionCategoryName;
    private string? NewSectionName;

    private ImmutableArray<Transaction>? LoadedTransactions;
    private ImmutableArray<TransactionBlock>? Transactions;

    protected override Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        Month = new DateOnly(now.Year, now.Month, 1).AddMonths(-1);
        _RefreshCategories();

        return Task.CompletedTask;
    }

    private void _RefreshCategories()
    {
        if (Month.HasValue == false)
        {
            return;
        }
        var allData = Categoriser.GetSelectorData(Month!.Value);
        Categories = allData.Categories;
        AllSections = allData.Sections
            .Select(s => new SectionSelectorRow(s, _ToDisplay(s), Guid.NewGuid().ToString())) //Arbitrary Id
            .ToImmutableArray();

        static string _ToDisplay(SectionHeader s) => $"{s.Parent.Name}: {s.Name}";
    }

    private void OnSetMonth(string? yearAndMonth)
    {
        if (DateOnly.TryParseExact(yearAndMonth, "yyyy-MM", out var parsed))
        {
            Month = parsed;

            _RefreshCategoriesAndMatchedTransactions();
        }
    }

    private void _RefreshCategoriesAndMatchedTransactions()
    {
        _RefreshCategories();
        _RefreshMatchedTransactions();
    }

    private void CreateNewSection()
    {
        var category = Categories?.SingleOrDefault(x => x.Name == NewSectionCategoryName);
        if (category == null || NewSectionName.IsNullOrWhiteSpace())
        {
            return;
        }
        Categoriser.AddSection(category, NewSectionName!, matchMonthOnly: Month);

        _RefreshCategoriesAndMatchedTransactions();

        NewSectionCategoryName = null;
        NewSectionName = null;
    }

    private async Task PerformMatch(TransactionRow row)
    {
        LastActionError = null;

        var found = AllSections?.SingleOrDefault(x => x.Id == row.SelectionId);
        var header = found?.Header;
        if (header == null)
        {
            LastActionError = "Could not find Section";
            return;
        }

        Result result;
        if (row.AddOnlyForTransaction)
        {
            result = Categoriser.MatchOnce(row.Transaction, header!, row.MatchOn, row.OverrideDescription);
        }
        else
        {
            if (row.MatchOn.IsNullOrEmpty())
            {
                LastActionError = "Match On must be defined";
                return;
            }
            result = Categoriser.ApplyMatch(row.Transaction, header!, row.MatchOn!, row.OverrideDescription);
        }
        if (result.IsSuccess)
        {
            //Triggers total table refresh - task yield required to enable re-render
            Transactions = ImmutableArray<TransactionBlock>.Empty;
            StateHasChanged();
            await Task.Yield();

            _RefreshMatchedTransactions();
        }
        else
        {
            LastActionError = result.Error;
        }
    }

    private void DeleteMatch(TransactionRow row)
    {
        LastActionError = null;

        if (row.Section == null || row.LatestMatch == null)
        {
            LastActionError = "Empty section or empty matches";
            return;
        }

        var result = Categoriser.DeleteMatch(row.Section!, row.LatestMatch!);
        LastActionError = result.Error;

        _RefreshMatchedTransactions();
    }

    private async Task ReverseFile(InputFileChangeEventArgs e)
    {
        ReverseFileResult = "Running...";

        using var inputStream = await _CopyToMemoryStreamAsync(e);
        var result = await ExcelFileRunner.ReverseCsvTransactionsToExcel(inputStream);

        if (result.IsSuccess)
        {
            ReverseFileResult = "Success!";

            await JS.InvokeAsync<object>(
                "jsSaveAsFile",
                $"{e.File.Name}_{DateTime.Now.ToFileTime()}.xlsx",
                Convert.ToBase64String(result.Result!));
        }
        else
        {
            ReverseFileResult = $"Failed: {result.Error}";
        }
    }

    private async Task Categorise(InputFileChangeEventArgs e)
    {
        LoadedTransactions = null;
        Transactions = null;

        using var inputStream = await _CopyToMemoryStreamAsync(e);
        var transactionResult = await ExcelFileRunner.LoadTransactionsFromExcel(inputStream);
        if (transactionResult.IsSuccess)
        {
            CategorisedTransactionsResult = "Success!";

            LoadedTransactions = transactionResult.Result;
            _RefreshMatchedTransactions();
        }
        else
        {
            CategorisedTransactionsResult = $"Failed: {transactionResult.Error}";
        }
    }

    private void _RefreshMatchedTransactions()
    {
        if (Month.HasValue == false || LoadedTransactions.HasValue == false || AllSections.HasValue == false)
        {
            return;
        }
        var categorisationResult = Categoriser.Categorise(LoadedTransactions!.Value, month: Month!.Value);
        Transactions = TransactionBlock.CreateFromResult(categorisationResult, AllSections!.Value);
    }

    /// <summary>
    ///  Must copy to memory stream as otherwise can raise:
    ///  "System.NotSupportedException: Synchronous reads are not supported."
    ///  when passing to service
    ///  </summary>
    private async Task<MemoryStream> _CopyToMemoryStreamAsync(InputFileChangeEventArgs e)
    {
        var inputStream = new MemoryStream();
        var stream = e.File.OpenReadStream();
        await stream.CopyToAsync(inputStream);
        inputStream.Position = 0;
        return inputStream;
    }
}