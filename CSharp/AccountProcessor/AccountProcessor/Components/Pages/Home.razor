@page "/"
@rendermode InteractiveServer

<!-- Add icon library: https://fontawesome.com/v4/icons/ -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<!-- Button Style -->
<style>
    .btn {
        background-color: DodgerBlue;
        border: none;
        color: white;
        padding: 2px 2x;
        font-size: 14px;
        cursor: pointer;
    }

    /* Darker background on mouse-over */
    .btn:hover {
        background-color: RoyalBlue;
    }
</style>

<PageTitle>Home</PageTitle>

<h1>Account Processor</h1>

<p />
<hr />

<p role="status"><strong>Last Action Result: </strong>
    <label style=@(Model.LastActionResult?.IsSuccess == true ? "color:green" : "color:red")>
        @(Model.LastActionResult?.IsSuccess == true ? "Success!" : Model.LastActionResult?.Error)
    </label>
</p>

<hr />

<p style="border:thin">

    <TransactionsImport OnTransactionsImport=@Model.OnTransactionsImport />

    <table style="width:auto" cellpadding="5">
        <tbody>
            <!-- Load & Categorise transaction files -->
            <tr class="border-top">
                <td><label><strong>Categorise: </strong></label></td>
                <td>
                    <button class="btn btn-primary">
                        <!-- ".extract.xlsx" filter works as Co-op/Santander files written as ".extract.xlsx" -->
                        <InputFile OnChange="@LoadTransactionsAndCategorise" accept=@FileConstants.ExtractedTransactionsFileExtension />
                    </button>
                </td>
                <td><label>Loads an xlsx with Date, Description & Amount columns and runs categorisation. </label></td>
            </tr>

            @if (TransactionsAreFullyLoaded()) //Only display export button if transactions have been loaded
            {
                <!-- Export categorised -->
                <tr class="border-top">
                    <td><label><strong>Export Categorised</strong></label></td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ExportCategorisedTransactions()">Export</button>
                    </td>
                    <td><label>Finally, exports the categorised transactions by category, for storage in LifeOrganisation file. </label></td>
                </tr>
            }
        </tbody>
    </table>
</p>

<hr />

<label>Month:</label>
<input type="month" value="@Model.Month.ToString("yyyy-MM")" @onchange="e => Model.SetMonth((string?)e.Value)">
<button @onclick="() => Model.SkipMonth(-1)"><i class="fa fa-arrow-left" aria-hidden="true"></i></button>
<button @onclick="() => Model.SkipMonth(+1)"><i class="fa fa-arrow-right" aria-hidden="true"></i></button>
<p/>

@if (TransactionsAreFullyLoaded())
{
    <label>
        <strong>Transactions Period:</strong> @Model.EarliestTransaction?.ToString("dd MMM") to @Model.LatestTransaction?.ToString("dd MMM")
    </label>
    
    <hr />

    <label ><strong>Add New Section:</strong></label>
    <select style="margin-right: 5px" value="@Model.NewSectionCategoryName" @onchange="e => Model.SetNewSectionCategory((string?)e.Value)">
        <option value="@SelectorConstants.ChooseCategoryDefaultId" selected>Choose Category</option>
        @foreach (var cat in Model.Categories!.Value)
        {
            <option value="@cat.Name">@cat.Name</option>
        }
    </select>

    <input style="margin-right: 5px" placeholder="Section Name..." value="@Model.NewSectionName" @onchange="e => Model.SetNewSectionName((string?)e.Value)" />

    <button class="btn" @onclick="Model.CreateNewSection"><i class="fa fa-plus"></i></button>

    /* UnMatched Rows */
    @if (Model.UnMatchedModel != null)
    {
        <hr />
        <UnMatchedRowsTable @ref="UnMatchedRowsTable" Model=@Model.UnMatchedModel AddNewMatchForRow=@Model.AddNewMatchForRow />
    }

    /* Matched Rows */
    @if (Model.MatchedModel != null)
    {
        <hr />
        <MatchedRowsTable @ref="MatchedRowsTable" Model=@Model.MatchedModel ClearMatch=@Model.ClearMatch />
    }
}