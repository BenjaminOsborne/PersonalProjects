@using System.IO
@using System.Collections.Immutable;
@using AccountProcessor.Components.Services;
@page "/"
@rendermode InteractiveServer
@inject Services.IExcelFileRunner ExcelFileRunner;
@inject Services.ITransactionCategoriser Categoriser;
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Account Processor</h1>

<p/>
<hr/>

<button class="btn btn-primary">
    <strong>Reverse File: </strong>
    <InputFile OnChange="@ReverseFile" accept=".csv" />
</button>
<p role="status"><strong>Result</strong>: @ReverseFileResult</p>

<p/>

<hr/>

<p/>

<button class="btn btn-primary">
    <strong>Categorise: </strong>
    <InputFile OnChange="@Categorise" accept=".xlsx" />
</button>
<p role="status"><strong>Result</strong>: @CategorisedTransactionsResult</p>

<hr />

<p role="status"><strong>Last Action Error</strong>: @LastActionError</p>

@if (Transactions.HasValue)
{
    foreach(var grp in Transactions.Value)
    {
        <p role="status"><strong>@grp.Display</strong></p>

        <table class="table" style="width:auto">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Description</th>
                    <th>Amount (£)</th>
                    <th>Category</th>
                    <th>Match On</th>
                    <th>Description</th>
                    <th>Match General</th>
                    <th>Match Once</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in grp.Rows)
                {
                    var tr = row.Transaction;
                    var displayAmount = tr.Amount < 0 ? $"-£{-tr.Amount:F2}" : $"£{tr.Amount:F2}";
                    var styleColor = tr.Amount < 0 ? "color:red" : "color:black";

                    <tr>
                        <td class="fitwidth">@tr.Date.ToShortDateString()</td>
                        <td class="fitwidth">@tr.Description</td>
                        <td style="@styleColor">@displayAmount</td>

                        <td>
                            <select id="categoryID" value="Initial" @onchange="e => row.SelectionId = (string?)e.Value">
                                <option value="0" selected>Choose Section</option>
                                @if (AllSections.HasValue)
                                {
                                    foreach (var cat in AllSections)
                                    {
                                        <option value="@cat.id">@cat.display</option>
                                    }
                                }
                            </select>
                        </td>

                        <td>
                            <input placeholder="Match on" @onchange="e => row.MatchOn = (string?)e.Value" />
                        </td>
                        <td>
                            <input placeholder="Override Description" @onchange="e => row.OverrideDescription = (string?)e.Value" />
                        </td>
                        <td>
                            <button @onclick="() => PerformMatch(row, addOnceOnly: false)">Add General</button>
                        </td>
                        <td>
                            <button @onclick="() => PerformMatch(row, addOnceOnly: true)">Add Once</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<hr />

@code
{
    /// <summary> Display message after "Reverse File" called </summary>
    private string? ReverseFileResult;
    private string? CategorisedTransactionsResult;
    private string? LastActionError;

    private ImmutableArray<Transaction>? LoadedTransactions;
    private ImmutableArray<TransactionBlock>? Transactions;

    private ImmutableArray<(SectionHeader header, string display, string id)>? AllSections;

    protected override Task OnInitializedAsync()
    {
        var allData = Categoriser.GetSelectorData();
        AllSections = allData.Sections.Select(s => (
            header: s,
            display: _ToDisplay(s),
            id: Guid.NewGuid().ToString()))
            .ToImmutableArray();
        return Task.CompletedTask;
    }

    private static string _ToDisplay(SectionHeader s) => $"{s.Parent.Name}: {s.Name}";

    private void PerformMatch(TransactionRow row, bool addOnceOnly)
    {
        LastActionError = null;

        var found = AllSections?.SingleOrDefault(x => x.id == row.SelectionId);
        var header = found?.header;
        if (header == null)
        {
            LastActionError = "Could not find Section";
            return;
        }

        Result result;
        if (addOnceOnly)
        {
            result = Categoriser.MatchOnce(row.Transaction, header!, row.OverrideDescription);
        }
        else
        {
            if (row.MatchOn.IsNullOrEmpty())
            {
                LastActionError = "Match On must be defined";
                return;
            }
            result = Categoriser.ApplyMatch(row.Transaction, header!, row.MatchOn!, row.OverrideDescription);
        }
        if (result.IsSuccess)
        {
            _RefreshCategorisedTransactions();
        }
        else
        {
            LastActionError = result.Error;
        }
    }

    private async Task ReverseFile(InputFileChangeEventArgs e)
    {
        ReverseFileResult = "Running...";

        using var inputStream = await _CopyToMemoryStreamAsync(e);
        var result = await ExcelFileRunner.ReverseCsvTransactions(inputStream);

        if (result.IsSuccess)
        {
            ReverseFileResult = "Success!";

            await JS.InvokeAsync<object>(
                "jsSaveAsFile",
                $"{e.File.Name}_{DateTime.Now.ToFileTime()}.xlsx",
                Convert.ToBase64String(result.Result!));
        }
        else
        {
            ReverseFileResult = $"Failed: {result.Error}";
        }
    }

    private async Task Categorise(InputFileChangeEventArgs e)
    {
        LoadedTransactions = null;
        Transactions = null;

        using var inputStream = await _CopyToMemoryStreamAsync(e);
        var transactionResult = await ExcelFileRunner.LoadTransactions(inputStream);
        if (transactionResult.IsSuccess)
        {
            CategorisedTransactionsResult = "Success!";

            LoadedTransactions = transactionResult.Result;
            _RefreshCategorisedTransactions();
        }
        else
        {
            CategorisedTransactionsResult = $"Failed: {transactionResult.Error}";
        }
    }

    private void _RefreshCategorisedTransactions()
    {
        if (LoadedTransactions.HasValue == false)
        {
            return;
        }
        var categorisationResult = Categoriser.Categorise(LoadedTransactions!.Value, DateOnly.FromDateTime(DateTime.UtcNow));
        Transactions = TransactionBlock.CreateFromResult(categorisationResult);
    }

    /// <summary>
    ///  Must copy to memory stream as otherwise can raise:
    ///  "System.NotSupportedException: Synchronous reads are not supported."
    ///  when passing to service
    ///  </summary>
    private async Task<MemoryStream> _CopyToMemoryStreamAsync(InputFileChangeEventArgs e)
    {
        var inputStream = new MemoryStream();
        var stream = e.File.OpenReadStream();
        await stream.CopyToAsync(inputStream);
        inputStream.Position = 0;
        return inputStream;
    }
}