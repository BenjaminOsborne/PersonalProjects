@using System.IO
@page "/"
@rendermode InteractiveServer
@inject Services.IExcelFileRunner ExcelFileRunner;
@inject Services.ITransactionCategoriser Categoriser;
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Account Processor</h1>

<p/>
<hr/>

<button class="btn btn-primary">
    <strong>Reverse File: </strong>
    <InputFile OnChange="@ReverseFile" accept=".csv" />
</button>
<p role="status"><strong>Result</strong>: @reverseFileResult</p>

<p/>

<hr/>

<p/>

<button class="btn btn-primary">
    <strong>Categorise: </strong>
    <InputFile OnChange="@Categorise" accept=".xlsx" />
</button>

<hr />

<input placeholder="Something todo" />
<button @onclick="AddItem">Add Item</button>
<select id="categoryID" value="Initial" @onchange="OnChangeItem">
    <option value="0" selected>Choose Category</option>
    <option value="1" selected>Value 1</option>
    <option value="2" selected>Value 2</option>
    @* @foreach (Category category in categories)
    {
        <option value="@category.Name">@category.Name</option>
    } *@
</select>

@code
{
    private async Task OnChangeItem(ChangeEventArgs e)
    {
        var model = Categoriser.GetModel();
        await Task.Delay(10);
    }

    private void AddItem()
    {
        
    }

    private string? reverseFileResult;

    private async Task ReverseFile(InputFileChangeEventArgs e)
    {
        reverseFileResult = "Running...";

        using var inputStream = await _CopyToMemoryStreamAsync(e);
        var result = await ExcelFileRunner.ReverseCsvTransactions(inputStream);

        if (result.IsSuccess)
        {
            reverseFileResult = "Success!";

            await JS.InvokeAsync<object>(
                "jsSaveAsFile",
                $"{e.File.Name}_{DateTime.Now.ToFileTime()}.xlsx",
                Convert.ToBase64String(result.Result!));
        }
        else
        {
            reverseFileResult = $"Failed: {result.Error}";
        }
    }

    private async Task Categorise(InputFileChangeEventArgs e)
    {
        using var inputStream = await _CopyToMemoryStreamAsync(e);
        await ExcelFileRunner.Categorise(inputStream);
    }

    /// <summary>
    ///  Must copy to memory stream as otherwise can raise:
    ///  "System.NotSupportedException: Synchronous reads are not supported."
    ///  when passing to service
    ///  </summary>
    private async Task<MemoryStream> _CopyToMemoryStreamAsync(InputFileChangeEventArgs e)
    {
        var inputStream = new MemoryStream();
        var stream = e.File.OpenReadStream();
        await stream.CopyToAsync(inputStream);
        inputStream.Position = 0;
        return inputStream;
    }
}