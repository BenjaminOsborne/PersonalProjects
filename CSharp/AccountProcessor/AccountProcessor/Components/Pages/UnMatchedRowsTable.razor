@using System.Collections.Immutable;
@rendermode InteractiveServer

<MudText Color=Color.Secondary Typo=Typo.h6><strong>Un-matched</strong></MudText>

<MudDataGrid Items=@Model.UnMatchedRows
             ColumnResizeMode=ResizeMode.Column
             SortMode=SortMode.Multiple
             Dense=true
             FixedHeader=true>
    <Columns>
        <PropertyColumn Property="x => x.Transaction.DateDisplay" Title="Date"/>
        <PropertyColumn Property="x => x.Transaction.Description" Title="Transaction"/>
        <TemplateColumn Title="Transaction">
            <CellTemplate>
                <MudLink Href=@context.Item.Hyperlink Target="_blank">@context.Item.Transaction.Description</MudLink>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Amount (£)">
            <CellTemplate>
                <MudText Typo=Typo.body2 Color=@context.Item.AmountColor>@context.Item.DisplayAmount</MudText>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Category">
            <CellTemplate>                
                <MudSelect T=string
                           @bind-Value=@context.Item.SelectionId
                           Placeholder="Choose category"
                           Variant=Variant.Outlined
                           Margin=Margin.Normal
                           Dense=true
                           Typo=Typo.body2
                           Clearable=true
                           Validation=@((string? s) => s == null ? "Select category" : null)>
                    @foreach (var cat in Model.TopSuggestions)
                    {
                        <MudSelectItem Value=@cat.Id>@cat.Display</MudSelectItem>
                    }
                    <MudSelectItem Disabled=true Value=@("")>
                        <MudDivider Light=true/>
                    </MudSelectItem>
                    @foreach (var cat in Model.AllSections)
                    {
                        <MudSelectItem Value=@cat.Id>@cat.Display</MudSelectItem>
                    }
                </MudSelect>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Match On">
            <CellTemplate>
                <MudTextField T=string @bind-Value=@context.Item.MatchOn Typo=Typo.body2 />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Description">
            <CellTemplate>
                <MudTextField T=string @bind-Value=@context.Item.OverrideDescription Typo=Typo.body2 />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Once">
            <CellTemplate>
                <MudCheckBox @bind-Value=@context.Item.AddOnlyForTransaction />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Match">
            <CellTemplate>
                <MudTooltip Text="Create">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@(() => AddNewMatchForRow(context.Item))"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    public record ViewModel(
        ImmutableArray<SectionSelectorRow> TopSuggestions,
        ImmutableArray<SectionSelectorRow> AllSections,
        ImmutableArray<TransactionRowUnMatched> UnMatchedRows);

    [Parameter]
    public required ViewModel Model { get; set; }

    [Parameter]
    public required Action<TransactionRowUnMatched> AddNewMatchForRow { get; init; }

    public void UpdateModel(ViewModel model)
    {
        Model = model;
        StateHasChanged(); //Must trigger state change, as Blazor requires triggering if an interaction in the other table child view initiated the change
    }

}
