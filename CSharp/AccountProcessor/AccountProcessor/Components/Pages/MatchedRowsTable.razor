@using System.Collections.Immutable;
@rendermode InteractiveServer

<MudText Color=Color.Primary Typo=Typo.h6><strong>Matched</strong></MudText>

<MudDataGrid Items=@Model.MatchedRows
             ColumnResizeMode=ResizeMode.Column
             SortMode=SortMode.Multiple
             Dense=true
             FixedHeader=true
             Height="80vh">
    <Columns>
        <PropertyColumn Property="x => x.CategorySectionDisplay" Title="Category: Section"/>
        <PropertyColumn Property="x => x.Transaction.DateDisplay" Title="Date"/>
        <PropertyColumn Property="x => x.Transaction.Description" Title="Transaction"/>
        <PropertyColumn Property="x => x.MatchDescription" Title="Export As"/>
        <TemplateColumn Title="Amount (£)">
            <CellTemplate>
                <MudText Typo=Typo.body2 Color=@context.Item.AmountColor>@context.Item.DisplayAmount</MudText>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.MatchPattern" Title="Match Pattern"/>
        <TemplateColumn Title="Clear">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => ClearMatch(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    public record ViewModel(ImmutableArray<TransactionRowMatched> MatchedRows);

    [Parameter]
    public required Action<TransactionRowMatched> ClearMatch { get; init; }
    [Parameter]
    public required ViewModel Model { get; set; }

    public void UpdateModel(ViewModel model)
    {
        Model = model;
        StateHasChanged(); //Must trigger state change, as Blazor requires triggering if an interaction in the other table child view initiated the change
    }
}