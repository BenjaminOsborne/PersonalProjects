@using AccountProcessor.Client.ClientServices

@implements IAsyncDisposable

<MudStack Row=true Class="align-end mt-2">
    <MudPaper Elevation="0" Class="mb-3 d-flex justify-start flex-shrink-1">
        <MudDatePicker @bind-Date=@YearMonthBind FixDay=1 DateFormat="MMM yyyy" />
    </MudPaper>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="() => Model.SkipMonthAsync(-1)" />
    <MudIconButton Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Medium" OnClick="() => Model.SkipMonthAsync(+1)" />
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="() => _RefreshAsync()" />
</MudStack>

<MudText Typo="Typo.caption"><strong>Transactions Period:</strong> @Model.EarliestTransaction?.ToString("dd MMM") to @Model.LatestTransaction?.ToString("dd MMM")</MudText>

@code
{
    private readonly TaskTracker _taskTracker = new();

    [Parameter]
    public required HomeViewModel Model { get; init; }
    [Parameter]
    public required Func<Task> PostActionRefresh { get; init; }

    public ValueTask DisposeAsync() =>
        _taskTracker.DisposeAsync();

    private DateTime? YearMonthBind
    {
        get => Model.Month?.ToDateTime(TimeOnly.MinValue);
        set => _taskTracker.TrackTask(Task.Run(async () =>
        {
            await Model.SetMonthAsync(value);
            await _PostActionAsync();
        }));
    }

    private async Task _RefreshAsync()
    {
        await Model.RefreshTransactionsAsync();
        await _PostActionAsync();
    }

    private Task _PostActionAsync() =>
        InvokeAsync(PostActionRefresh);
}